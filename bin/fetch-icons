#!/usr/bin/env ruby
# frozen_string_literal: true

require "fileutils"
require "nokogiri"
require "active_support/gzip"

# path to your application root.
GEM_ROOT = File.expand_path("..", __dir__)

def system!(cmd, **options)
  out_reader, out_writer = IO.pipe
  err_reader, err_writer = IO.pipe
  options.delete(:chdir) if options.fetch(:chdir, nil).nil?

  opts = {
    out: out_writer.fileno,
    err: err_writer.fileno
  }.merge(options)
  pid = Process.spawn(ENV, *cmd, **opts)
  mut = Mutex.new
  cond = ConditionVariable.new

  status = nil
  Thread.new do
    _pid, status = Process.wait2(pid)
    mut.synchronize { cond.signal }
  end

  out_writer.close
  err_writer.close

  stdout = nil
  stderr = nil
  out_thread = Thread.new { stdout = out_reader.read }
  err_thread = Thread.new { stderr = err_reader.read }
  mut.synchronize { cond.wait(mut, 0.1) } while status.nil?

  out_thread.join
  err_thread.join

  out_reader.close
  err_writer.close
  err_reader.close

  raise "Process #{cmd} exited with status #{status.exitstatus}: #{stdout}#{stderr}" unless status.success?

  stdout
end

def clone!
  puts "Clonning lucide-icons/lucide..."
  system! "git clone https://github.com/lucide-icons/lucide tmp/lucide"

  puts "Checkout out latest version..."
  tag = FileUtils.chdir "tmp/lucide" do
    rev = system! "git rev-list --tags --max-count=1"
    puts "Checkout out lucide at #{rev}"
    tag = system! "git describe --tags #{rev}"
    puts "Using latest lucide version: #{tag}"
    system! "git checkout #{tag}"
    tag
  end
  File.write "lib/lucide-rails/lucide_version.rb", <<~RUBY
    # frozen_string_literal: true

    module LucideRails
      LUCIDE_VERSION = "#{tag.strip}"
    end
  RUBY
  FileUtils.mv Dir.glob("tmp/lucide/icons/*.svg"), "icons/original"
end

def strip!
  compressed_data = StringIO.new

  Dir.glob("icons/{custom,original}/*.svg").each do |input|
    File.open("icons/stripped/#{File.basename(input)}", "wb") do |output|
      contents = File.read(input)
      Nokogiri::HTML::DocumentFragment.parse(contents).tap do |svg|
        stripped = svg.at_css("svg")
                      .inner_html
                      .lines
                      .map(&:strip)
                      .join
        compressed_data << "#{File.basename(input, ".*")},"
        compressed_data << stripped
        compressed_data << "\x00"
        output << stripped
      end
    end
  end

  File.open("icons/stripped.bin.gz", "wb") do |bin|
    bin << ActiveSupport::Gzip.compress(compressed_data.string)
  end
end

def commit!
  version = system! "ruby -e \"require_relative 'lib/lucide-rails/lucide_version'; puts LucideRails::LUCIDE_VERSION\""
  system! "git add icons lib/lucide-rails/lucide_version.rb"
  system! "git commit -m 'chore: Bump to #{version.strip}'"
end

def extract_changes!
  updated_icons = []
  added_icons = []

  status = system!("git status --porcelain")
           .split("\n")
           .filter { _1 =~ %r{icons/custom} }
           .filter { _1 =~ %r{icons/original} }
           .map(&:strip)
           .map { _1.split(" ", 2) }
           .each do |i|
    status, path = i
    name = Pathname.new(path).basename.to_s.gsub(".svg", "")
    if status == "M"
      updated_icons << name
    else
      added_icons << name
    end
  end
  [added_icons, updated_icons]
end

UNRELEASED_HEADER = "## [Unreleased]"
ADDED_HEADER = "### Added"
UPDATED_HEADER = "### Updated"
OTHER_HEADER = "### Other Changes"

def update_changelog!(data)
  file = File.read("CHANGELOG.md")
  if file.start_with? UNRELEASED_HEADER
    amend_changelog!(file, data)
  else
    append_changelog!(file, data)
  end
end

def make_section(data)
  section = [UNRELEASED_HEADER]
  added, updated, other = data
  if added && !added.empty?
    section << ""
    section << ADDED_HEADER
    added.each { section << " - `#{_1}`" }
  end

  if updated && !updated.empty?
    section << ""
    section << UPDATED_HEADER
    updated.each { section << " - `#{_1}`" }
  end

  if other && !other.empty?
    section << ""
    section << OTHER_HEADER
    other.each { section << " - #{_1}" }
  end

  section << ""
  section << ""
end

def append_changelog!(file, data)
  section = make_section(data)
  File.write("CHANGELOG.md", "#{section.join("\n")}#{file}")
end

def amend_changelog!(file, data)
  added = Set.new
  updated = Set.new
  other = []

  lines = file.split("\n")
  section = :none
  cursor = 1
  lines[1...].each do |line|
    break if line.start_with? "## "

    cursor += 1
    if line.start_with? ADDED_HEADER
      section = :added
      next
    elsif line.start_with? UPDATED_HEADER
      section = :updated
      next
    elsif line.start_with? OTHER_HEADER
      section = :other
      next
    end

    line = line.gsub(/^\s*-\s*/, "").strip
    next if line.empty?

    case section
    when :added
      added << line.gsub(/`([^`]+)`/, '\1')
    when :updated
      updated << line.gsub(/`([^`]+)`/, '\1')
    when :other
      other << line
    end
  end

  git_added, git_updated = data
  git_added.each { added << _1 }
  git_updated.each { updated << _1 }

  original = lines[cursor...].join("\n")
  section = make_section([added, updated, other])
  File.write("CHANGELOG.md", "#{section.join("\n")}#{original}")
end

FileUtils.chdir GEM_ROOT do
  FileUtils.rm_rf Dir.glob("#{GEM_ROOT}/tmp/*")
  FileUtils.mkdir_p "icons/custom"
  FileUtils.mkdir_p "icons/original"
  FileUtils.mkdir_p "icons/stripped"

  clone!
  strip!
  changes = extract_changes!
  update_changelog!(changes)
  commit!
ensure
  FileUtils.rm_rf Dir.glob("#{GEM_ROOT}/tmp/*")
end
